# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DLFS

import flatbuffers

class Dataset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDataset(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Dataset()
        x.Init(buf, n + offset)
        return x

    # Dataset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Dataset
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Dataset
    def Examples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Example import Example
            obj = Example()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dataset
    def ExamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Dataset
    def Categories(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Category import Category
            obj = Category()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Dataset
    def CategoriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def DatasetStart(builder): builder.StartObject(3)
def DatasetAddId(builder, id): builder.PrependUint64Slot(0, id, 0)
def DatasetAddExamples(builder, examples): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(examples), 0)
def DatasetStartExamplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DatasetAddCategories(builder, categories): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(categories), 0)
def DatasetStartCategoriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DatasetEnd(builder): return builder.EndObject()

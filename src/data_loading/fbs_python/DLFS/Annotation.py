# automatically generated by the FlatBuffers compiler, do not modify

# namespace: DLFS

import flatbuffers

class Annotation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAnnotation(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Annotation()
        x.Init(buf, n + offset)
        return x

    # Annotation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Annotation
    def Bbox(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .BoundingBox import BoundingBox
            obj = BoundingBox()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Annotation
    def CatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Annotation
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Annotation
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Annotation
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def AnnotationStart(builder): builder.StartObject(5)
def AnnotationAddBbox(builder, bbox): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bbox), 0)
def AnnotationAddCatId(builder, catId): builder.PrependUint16Slot(1, catId, 0)
def AnnotationAddId(builder, id): builder.PrependUint64Slot(2, id, 0)
def AnnotationAddImageId(builder, imageId): builder.PrependUint64Slot(3, imageId, 0)
def AnnotationAddArea(builder, area): builder.PrependFloat32Slot(4, area, 0.0)
def AnnotationEnd(builder): return builder.EndObject()
